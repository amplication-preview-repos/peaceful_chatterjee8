/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ServiceManagement } from "./ServiceManagement";
import { ServiceManagementCountArgs } from "./ServiceManagementCountArgs";
import { ServiceManagementFindManyArgs } from "./ServiceManagementFindManyArgs";
import { ServiceManagementFindUniqueArgs } from "./ServiceManagementFindUniqueArgs";
import { CreateServiceManagementArgs } from "./CreateServiceManagementArgs";
import { UpdateServiceManagementArgs } from "./UpdateServiceManagementArgs";
import { DeleteServiceManagementArgs } from "./DeleteServiceManagementArgs";
import { ServiceManagementService } from "../serviceManagement.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServiceManagement)
export class ServiceManagementResolverBase {
  constructor(
    protected readonly service: ServiceManagementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServiceManagement",
    action: "read",
    possession: "any",
  })
  async _serviceManagementsMeta(
    @graphql.Args() args: ServiceManagementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServiceManagement])
  @nestAccessControl.UseRoles({
    resource: "ServiceManagement",
    action: "read",
    possession: "any",
  })
  async serviceManagements(
    @graphql.Args() args: ServiceManagementFindManyArgs
  ): Promise<ServiceManagement[]> {
    return this.service.serviceManagements(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServiceManagement, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServiceManagement",
    action: "read",
    possession: "own",
  })
  async serviceManagement(
    @graphql.Args() args: ServiceManagementFindUniqueArgs
  ): Promise<ServiceManagement | null> {
    const result = await this.service.serviceManagement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceManagement)
  @nestAccessControl.UseRoles({
    resource: "ServiceManagement",
    action: "create",
    possession: "any",
  })
  async createServiceManagement(
    @graphql.Args() args: CreateServiceManagementArgs
  ): Promise<ServiceManagement> {
    return await this.service.createServiceManagement({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceManagement)
  @nestAccessControl.UseRoles({
    resource: "ServiceManagement",
    action: "update",
    possession: "any",
  })
  async updateServiceManagement(
    @graphql.Args() args: UpdateServiceManagementArgs
  ): Promise<ServiceManagement | null> {
    try {
      return await this.service.updateServiceManagement({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceManagement)
  @nestAccessControl.UseRoles({
    resource: "ServiceManagement",
    action: "delete",
    possession: "any",
  })
  async deleteServiceManagement(
    @graphql.Args() args: DeleteServiceManagementArgs
  ): Promise<ServiceManagement | null> {
    try {
      return await this.service.deleteServiceManagement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
