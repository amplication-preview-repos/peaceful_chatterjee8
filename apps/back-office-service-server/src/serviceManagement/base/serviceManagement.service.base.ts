/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ServiceManagement as PrismaServiceManagement,
} from "@prisma/client";

export class ServiceManagementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceManagementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceManagement.count(args);
  }

  async serviceManagements(
    args: Prisma.ServiceManagementFindManyArgs
  ): Promise<PrismaServiceManagement[]> {
    return this.prisma.serviceManagement.findMany(args);
  }
  async serviceManagement(
    args: Prisma.ServiceManagementFindUniqueArgs
  ): Promise<PrismaServiceManagement | null> {
    return this.prisma.serviceManagement.findUnique(args);
  }
  async createServiceManagement(
    args: Prisma.ServiceManagementCreateArgs
  ): Promise<PrismaServiceManagement> {
    return this.prisma.serviceManagement.create(args);
  }
  async updateServiceManagement(
    args: Prisma.ServiceManagementUpdateArgs
  ): Promise<PrismaServiceManagement> {
    return this.prisma.serviceManagement.update(args);
  }
  async deleteServiceManagement(
    args: Prisma.ServiceManagementDeleteArgs
  ): Promise<PrismaServiceManagement> {
    return this.prisma.serviceManagement.delete(args);
  }
}
