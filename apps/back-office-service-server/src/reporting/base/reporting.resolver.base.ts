/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Reporting } from "./Reporting";
import { ReportingCountArgs } from "./ReportingCountArgs";
import { ReportingFindManyArgs } from "./ReportingFindManyArgs";
import { ReportingFindUniqueArgs } from "./ReportingFindUniqueArgs";
import { CreateReportingArgs } from "./CreateReportingArgs";
import { UpdateReportingArgs } from "./UpdateReportingArgs";
import { DeleteReportingArgs } from "./DeleteReportingArgs";
import { ReportingService } from "../reporting.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Reporting)
export class ReportingResolverBase {
  constructor(
    protected readonly service: ReportingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Reporting",
    action: "read",
    possession: "any",
  })
  async _reportingsMeta(
    @graphql.Args() args: ReportingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Reporting])
  @nestAccessControl.UseRoles({
    resource: "Reporting",
    action: "read",
    possession: "any",
  })
  async reportings(
    @graphql.Args() args: ReportingFindManyArgs
  ): Promise<Reporting[]> {
    return this.service.reportings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Reporting, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Reporting",
    action: "read",
    possession: "own",
  })
  async reporting(
    @graphql.Args() args: ReportingFindUniqueArgs
  ): Promise<Reporting | null> {
    const result = await this.service.reporting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Reporting)
  @nestAccessControl.UseRoles({
    resource: "Reporting",
    action: "create",
    possession: "any",
  })
  async createReporting(
    @graphql.Args() args: CreateReportingArgs
  ): Promise<Reporting> {
    return await this.service.createReporting({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Reporting)
  @nestAccessControl.UseRoles({
    resource: "Reporting",
    action: "update",
    possession: "any",
  })
  async updateReporting(
    @graphql.Args() args: UpdateReportingArgs
  ): Promise<Reporting | null> {
    try {
      return await this.service.updateReporting({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Reporting)
  @nestAccessControl.UseRoles({
    resource: "Reporting",
    action: "delete",
    possession: "any",
  })
  async deleteReporting(
    @graphql.Args() args: DeleteReportingArgs
  ): Promise<Reporting | null> {
    try {
      return await this.service.deleteReporting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
