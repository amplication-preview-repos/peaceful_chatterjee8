/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Reporting as PrismaReporting } from "@prisma/client";

export class ReportingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReportingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.reporting.count(args);
  }

  async reportings(
    args: Prisma.ReportingFindManyArgs
  ): Promise<PrismaReporting[]> {
    return this.prisma.reporting.findMany(args);
  }
  async reporting(
    args: Prisma.ReportingFindUniqueArgs
  ): Promise<PrismaReporting | null> {
    return this.prisma.reporting.findUnique(args);
  }
  async createReporting(
    args: Prisma.ReportingCreateArgs
  ): Promise<PrismaReporting> {
    return this.prisma.reporting.create(args);
  }
  async updateReporting(
    args: Prisma.ReportingUpdateArgs
  ): Promise<PrismaReporting> {
    return this.prisma.reporting.update(args);
  }
  async deleteReporting(
    args: Prisma.ReportingDeleteArgs
  ): Promise<PrismaReporting> {
    return this.prisma.reporting.delete(args);
  }
}
