/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Monitoring } from "./Monitoring";
import { MonitoringCountArgs } from "./MonitoringCountArgs";
import { MonitoringFindManyArgs } from "./MonitoringFindManyArgs";
import { MonitoringFindUniqueArgs } from "./MonitoringFindUniqueArgs";
import { CreateMonitoringArgs } from "./CreateMonitoringArgs";
import { UpdateMonitoringArgs } from "./UpdateMonitoringArgs";
import { DeleteMonitoringArgs } from "./DeleteMonitoringArgs";
import { MonitoringService } from "../monitoring.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Monitoring)
export class MonitoringResolverBase {
  constructor(
    protected readonly service: MonitoringService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Monitoring",
    action: "read",
    possession: "any",
  })
  async _monitoringsMeta(
    @graphql.Args() args: MonitoringCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Monitoring])
  @nestAccessControl.UseRoles({
    resource: "Monitoring",
    action: "read",
    possession: "any",
  })
  async monitorings(
    @graphql.Args() args: MonitoringFindManyArgs
  ): Promise<Monitoring[]> {
    return this.service.monitorings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Monitoring, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Monitoring",
    action: "read",
    possession: "own",
  })
  async monitoring(
    @graphql.Args() args: MonitoringFindUniqueArgs
  ): Promise<Monitoring | null> {
    const result = await this.service.monitoring(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Monitoring)
  @nestAccessControl.UseRoles({
    resource: "Monitoring",
    action: "create",
    possession: "any",
  })
  async createMonitoring(
    @graphql.Args() args: CreateMonitoringArgs
  ): Promise<Monitoring> {
    return await this.service.createMonitoring({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Monitoring)
  @nestAccessControl.UseRoles({
    resource: "Monitoring",
    action: "update",
    possession: "any",
  })
  async updateMonitoring(
    @graphql.Args() args: UpdateMonitoringArgs
  ): Promise<Monitoring | null> {
    try {
      return await this.service.updateMonitoring({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Monitoring)
  @nestAccessControl.UseRoles({
    resource: "Monitoring",
    action: "delete",
    possession: "any",
  })
  async deleteMonitoring(
    @graphql.Args() args: DeleteMonitoringArgs
  ): Promise<Monitoring | null> {
    try {
      return await this.service.deleteMonitoring(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
