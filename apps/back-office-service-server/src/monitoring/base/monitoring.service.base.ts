/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Monitoring as PrismaMonitoring } from "@prisma/client";

export class MonitoringServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MonitoringCountArgs, "select">
  ): Promise<number> {
    return this.prisma.monitoring.count(args);
  }

  async monitorings(
    args: Prisma.MonitoringFindManyArgs
  ): Promise<PrismaMonitoring[]> {
    return this.prisma.monitoring.findMany(args);
  }
  async monitoring(
    args: Prisma.MonitoringFindUniqueArgs
  ): Promise<PrismaMonitoring | null> {
    return this.prisma.monitoring.findUnique(args);
  }
  async createMonitoring(
    args: Prisma.MonitoringCreateArgs
  ): Promise<PrismaMonitoring> {
    return this.prisma.monitoring.create(args);
  }
  async updateMonitoring(
    args: Prisma.MonitoringUpdateArgs
  ): Promise<PrismaMonitoring> {
    return this.prisma.monitoring.update(args);
  }
  async deleteMonitoring(
    args: Prisma.MonitoringDeleteArgs
  ): Promise<PrismaMonitoring> {
    return this.prisma.monitoring.delete(args);
  }
}
