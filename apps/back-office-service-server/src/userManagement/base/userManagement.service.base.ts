/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserManagement as PrismaUserManagement } from "@prisma/client";

export class UserManagementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserManagementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userManagement.count(args);
  }

  async userManagements(
    args: Prisma.UserManagementFindManyArgs
  ): Promise<PrismaUserManagement[]> {
    return this.prisma.userManagement.findMany(args);
  }
  async userManagement(
    args: Prisma.UserManagementFindUniqueArgs
  ): Promise<PrismaUserManagement | null> {
    return this.prisma.userManagement.findUnique(args);
  }
  async createUserManagement(
    args: Prisma.UserManagementCreateArgs
  ): Promise<PrismaUserManagement> {
    return this.prisma.userManagement.create(args);
  }
  async updateUserManagement(
    args: Prisma.UserManagementUpdateArgs
  ): Promise<PrismaUserManagement> {
    return this.prisma.userManagement.update(args);
  }
  async deleteUserManagement(
    args: Prisma.UserManagementDeleteArgs
  ): Promise<PrismaUserManagement> {
    return this.prisma.userManagement.delete(args);
  }
}
