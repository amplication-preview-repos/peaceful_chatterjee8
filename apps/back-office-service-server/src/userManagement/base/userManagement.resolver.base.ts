/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserManagement } from "./UserManagement";
import { UserManagementCountArgs } from "./UserManagementCountArgs";
import { UserManagementFindManyArgs } from "./UserManagementFindManyArgs";
import { UserManagementFindUniqueArgs } from "./UserManagementFindUniqueArgs";
import { CreateUserManagementArgs } from "./CreateUserManagementArgs";
import { UpdateUserManagementArgs } from "./UpdateUserManagementArgs";
import { DeleteUserManagementArgs } from "./DeleteUserManagementArgs";
import { UserManagementService } from "../userManagement.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserManagement)
export class UserManagementResolverBase {
  constructor(
    protected readonly service: UserManagementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserManagement",
    action: "read",
    possession: "any",
  })
  async _userManagementsMeta(
    @graphql.Args() args: UserManagementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserManagement])
  @nestAccessControl.UseRoles({
    resource: "UserManagement",
    action: "read",
    possession: "any",
  })
  async userManagements(
    @graphql.Args() args: UserManagementFindManyArgs
  ): Promise<UserManagement[]> {
    return this.service.userManagements(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserManagement, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserManagement",
    action: "read",
    possession: "own",
  })
  async userManagement(
    @graphql.Args() args: UserManagementFindUniqueArgs
  ): Promise<UserManagement | null> {
    const result = await this.service.userManagement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserManagement)
  @nestAccessControl.UseRoles({
    resource: "UserManagement",
    action: "create",
    possession: "any",
  })
  async createUserManagement(
    @graphql.Args() args: CreateUserManagementArgs
  ): Promise<UserManagement> {
    return await this.service.createUserManagement({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserManagement)
  @nestAccessControl.UseRoles({
    resource: "UserManagement",
    action: "update",
    possession: "any",
  })
  async updateUserManagement(
    @graphql.Args() args: UpdateUserManagementArgs
  ): Promise<UserManagement | null> {
    try {
      return await this.service.updateUserManagement({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserManagement)
  @nestAccessControl.UseRoles({
    resource: "UserManagement",
    action: "delete",
    possession: "any",
  })
  async deleteUserManagement(
    @graphql.Args() args: DeleteUserManagementArgs
  ): Promise<UserManagement | null> {
    try {
      return await this.service.deleteUserManagement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
