/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserManagementService } from "../userManagement.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserManagementCreateInput } from "./UserManagementCreateInput";
import { UserManagement } from "./UserManagement";
import { UserManagementFindManyArgs } from "./UserManagementFindManyArgs";
import { UserManagementWhereUniqueInput } from "./UserManagementWhereUniqueInput";
import { UserManagementUpdateInput } from "./UserManagementUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserManagementControllerBase {
  constructor(
    protected readonly service: UserManagementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserManagement })
  @nestAccessControl.UseRoles({
    resource: "UserManagement",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUserManagement(
    @common.Body() data: UserManagementCreateInput
  ): Promise<UserManagement> {
    return await this.service.createUserManagement({
      data: data,
      select: {
        actions: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [UserManagement] })
  @ApiNestedQuery(UserManagementFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserManagement",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userManagements(
    @common.Req() request: Request
  ): Promise<UserManagement[]> {
    const args = plainToClass(UserManagementFindManyArgs, request.query);
    return this.service.userManagements({
      ...args,
      select: {
        actions: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserManagement",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userManagement(
    @common.Param() params: UserManagementWhereUniqueInput
  ): Promise<UserManagement | null> {
    const result = await this.service.userManagement({
      where: params,
      select: {
        actions: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        user: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserManagement",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUserManagement(
    @common.Param() params: UserManagementWhereUniqueInput,
    @common.Body() data: UserManagementUpdateInput
  ): Promise<UserManagement | null> {
    try {
      return await this.service.updateUserManagement({
        where: params,
        data: data,
        select: {
          actions: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserManagement",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUserManagement(
    @common.Param() params: UserManagementWhereUniqueInput
  ): Promise<UserManagement | null> {
    try {
      return await this.service.deleteUserManagement({
        where: params,
        select: {
          actions: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
