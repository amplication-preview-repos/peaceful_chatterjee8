/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ServiceRequest } from "./ServiceRequest";
import { ServiceRequestCountArgs } from "./ServiceRequestCountArgs";
import { ServiceRequestFindManyArgs } from "./ServiceRequestFindManyArgs";
import { ServiceRequestFindUniqueArgs } from "./ServiceRequestFindUniqueArgs";
import { CreateServiceRequestArgs } from "./CreateServiceRequestArgs";
import { UpdateServiceRequestArgs } from "./UpdateServiceRequestArgs";
import { DeleteServiceRequestArgs } from "./DeleteServiceRequestArgs";
import { ServiceRequestService } from "../serviceRequest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServiceRequest)
export class ServiceRequestResolverBase {
  constructor(
    protected readonly service: ServiceRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServiceRequest",
    action: "read",
    possession: "any",
  })
  async _serviceRequestsMeta(
    @graphql.Args() args: ServiceRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServiceRequest])
  @nestAccessControl.UseRoles({
    resource: "ServiceRequest",
    action: "read",
    possession: "any",
  })
  async serviceRequests(
    @graphql.Args() args: ServiceRequestFindManyArgs
  ): Promise<ServiceRequest[]> {
    return this.service.serviceRequests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServiceRequest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServiceRequest",
    action: "read",
    possession: "own",
  })
  async serviceRequest(
    @graphql.Args() args: ServiceRequestFindUniqueArgs
  ): Promise<ServiceRequest | null> {
    const result = await this.service.serviceRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceRequest)
  @nestAccessControl.UseRoles({
    resource: "ServiceRequest",
    action: "create",
    possession: "any",
  })
  async createServiceRequest(
    @graphql.Args() args: CreateServiceRequestArgs
  ): Promise<ServiceRequest> {
    return await this.service.createServiceRequest({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceRequest)
  @nestAccessControl.UseRoles({
    resource: "ServiceRequest",
    action: "update",
    possession: "any",
  })
  async updateServiceRequest(
    @graphql.Args() args: UpdateServiceRequestArgs
  ): Promise<ServiceRequest | null> {
    try {
      return await this.service.updateServiceRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceRequest)
  @nestAccessControl.UseRoles({
    resource: "ServiceRequest",
    action: "delete",
    possession: "any",
  })
  async deleteServiceRequest(
    @graphql.Args() args: DeleteServiceRequestArgs
  ): Promise<ServiceRequest | null> {
    try {
      return await this.service.deleteServiceRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
