/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ServiceProvider } from "./ServiceProvider";
import { ServiceProviderCountArgs } from "./ServiceProviderCountArgs";
import { ServiceProviderFindManyArgs } from "./ServiceProviderFindManyArgs";
import { ServiceProviderFindUniqueArgs } from "./ServiceProviderFindUniqueArgs";
import { CreateServiceProviderArgs } from "./CreateServiceProviderArgs";
import { UpdateServiceProviderArgs } from "./UpdateServiceProviderArgs";
import { DeleteServiceProviderArgs } from "./DeleteServiceProviderArgs";
import { ServiceProviderService } from "../serviceProvider.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServiceProvider)
export class ServiceProviderResolverBase {
  constructor(
    protected readonly service: ServiceProviderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServiceProvider",
    action: "read",
    possession: "any",
  })
  async _serviceProvidersMeta(
    @graphql.Args() args: ServiceProviderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServiceProvider])
  @nestAccessControl.UseRoles({
    resource: "ServiceProvider",
    action: "read",
    possession: "any",
  })
  async serviceProviders(
    @graphql.Args() args: ServiceProviderFindManyArgs
  ): Promise<ServiceProvider[]> {
    return this.service.serviceProviders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServiceProvider, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServiceProvider",
    action: "read",
    possession: "own",
  })
  async serviceProvider(
    @graphql.Args() args: ServiceProviderFindUniqueArgs
  ): Promise<ServiceProvider | null> {
    const result = await this.service.serviceProvider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceProvider)
  @nestAccessControl.UseRoles({
    resource: "ServiceProvider",
    action: "create",
    possession: "any",
  })
  async createServiceProvider(
    @graphql.Args() args: CreateServiceProviderArgs
  ): Promise<ServiceProvider> {
    return await this.service.createServiceProvider({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceProvider)
  @nestAccessControl.UseRoles({
    resource: "ServiceProvider",
    action: "update",
    possession: "any",
  })
  async updateServiceProvider(
    @graphql.Args() args: UpdateServiceProviderArgs
  ): Promise<ServiceProvider | null> {
    try {
      return await this.service.updateServiceProvider({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceProvider)
  @nestAccessControl.UseRoles({
    resource: "ServiceProvider",
    action: "delete",
    possession: "any",
  })
  async deleteServiceProvider(
    @graphql.Args() args: DeleteServiceProviderArgs
  ): Promise<ServiceProvider | null> {
    try {
      return await this.service.deleteServiceProvider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
